/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Parser)package edu.Itsco;

public class Parser{  public static void main(String args []) throws ParseException  {
    Parser parser = new Parser(System.in); //pARA INTRODUCIR DATOS DESDE EL TECLADO
    System.out.println("Bienvenido sea a mi compilador UwU");
    System.out.println("-------------------------------------");
    parser.principal();    System.out.println("El programa ha compilado correctamente UwU");
      }}PARSER_END(Parser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : {//definicion de las palabras reserbadas
	< INICIO: "inic" >
| 	<FIN: "fin" >

| 	<ENTERO : "ent" >
| 	< CADENA: "cad" >
| 	< FLOTANTE: "flot" >

| 	< VAR: "var" >

| 	< ESCRIBIR: "escrib" >
| 	< LEER: "leer" >

| 	<SI: "si" >
| 	<SINO: "sino" >
| 	<ENTONCES: "entons" >

| 	<SELECCIONA: "selec" >
| 	<CASO: "cas" >
| 	<DEFECTO: "def" >
|   <ROMPE: "romp" > 

| 	<PARA: "para" >
| 	<HASTA: "hasta" >
| 	<SIGUIENTE: "sigt" >

| 	<HACER: "hacer" >
| 	<MIENTRAS: "mient" >

}

TOKEN: {  //AREA DE OPERADORES
	< SUMA: "+" >
| 	<RESTA: "-" >
| 	<MULTI: "*" >
| 	<DIV: "/" >
| 	<MOD: "%" >

| 	<MAYOR: ">" >
| 	<MENOR: "<" >
| 	<IGUAL: "=" >

| 	<AND: "&&" >
| 	<OR: "||" >
| 	<NOT: "!" >

| 	<OPP: "(" >
| 	<OPC: ")" >

| 	< DP: ":" >

}

TOKEN: {//area tokens dinamicos
	< #letra: ["a"-"z" , "A"-"Z"] >
| 	< #digitos: ["0" - "9"] >

| 	< IDENTIFICADOR: (< letra >| "_") (< letra >| < digitos >|"_")* >

| 	<VALOR_ENTERO: (< digitos >)+ >
| 	<VALOR_FLOTANTE: (< digitos >)+ "." (< digitos >)+ >
| 	<VALOR_CADENA: "\"" (~["\""])* "\"" >

}

void principal(): { }
{
  < INICIO > <IDENTIFICADOR >
  (    sentencias()
  )+
  < FIN > 
}

void sentencias(): { }
{
  declaraVariables()
| gramaticaEscribir()
| gramaticaLeer()
| gramaticaAsignacion()
| gramaticaSi()
| gramaticaSelecciona()
| gramaticaPara()
| gramaticaMientras()
| gramaticaHacer()
} 

void declaraVariables(): {}
{
  < VAR > <IDENTIFICADOR > tipoDato() [<IGUAL > valor()]
}

void tipoDato(): { }
{
	< ENTERO > | < CADENA > | < FLOTANTE >
}

void valor(): { }
{
	< VALOR_CADENA >|< VALOR_ENTERO >|< VALOR_FLOTANTE >|< IDENTIFICADOR >
}

void gramaticaEscribir(): { }
{
  < ESCRIBIR > <OPP > valor() (< SUMA > valor())* < OPC >
}

void gramaticaLeer(): { }
{
  < LEER > <OPP > <IDENTIFICADOR > <OPC >
}

void gramaticaAsignacion(): { }
{
  < IDENTIFICADOR > <IGUAL > operacionSimple()
}

void operacionSimple(): { }
{
  ( valor() | operacionParentesis())
     ( operandoAritmetico() (valor() | operacionParentesis()) )*
}

void operacionParentesis(): { }
{
  < OPP > operacionSimple() < OPC >
}

void operandoAritmetico(): { }
{
  < SUMA > | < RESTA > | < MULTI > | < DIV > | < MOD >
}

void gramaticaSi(): { }
{
	< SI > condicion() < ENTONCES >
	(sentencias() )+	[<SINO > (sentencias()) * ]
	< FIN > <SI >
}

void condicion(): { }
{
  condicionSimple() (opLogico() condicionSimple() )*
}

void condicionSimple(): { }
{
  valor() opRelacional() valor()
}

void opLogico(): { }
{
	< AND > | < OR >
}

void opRelacional(): { }
{
  < MAYOR > [<IGUAL >] | < MENOR > [<IGUAL >] | <IGUAL > <IGUAL > | < NOT > <IGUAL >
}

void gramaticaSelecciona(): { }
{
  < SELECCIONA > <OPP > <IDENTIFICADOR> <OPC >
  ( < CASO > <VALOR_ENTERO > <DP > sentencias() < ROMPE >)+  [<DEFECTO > <DP > sentencias() < ROMPE >]
  < FIN > <SELECCIONA >  
}

void gramaticaPara(): { }
{
  < PARA > <IDENTIFICADOR > <IGUAL > <VALOR_ENTERO > <HASTA > <VALOR_ENTERO >
  	(sentencias() ) +
  	< SIGUIENTE >  	  
}

void  gramaticaMientras(): { }
{
  < MIENTRAS > <OPP > condicion() < OPC >
  	(sentencias() )+
  	< FIN > <MIENTRAS >   	  
}

void  gramaticaHacer(): { }
{
	< HACER >
	(sentencias() )+
	<FIN > < MIENTRAS > <OPP > condicion() < OPC >	  
}



